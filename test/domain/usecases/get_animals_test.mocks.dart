// Mocks generated by Mockito 5.4.0 from annotations
// in saiyo_pets/test/domain/usecases/get_animals_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:saiyo_pets/core/error/failures.dart' as _i5;
import 'package:saiyo_pets/domain/entities/animals/animal.dart' as _i7;
import 'package:saiyo_pets/domain/entities/animals/animals_response.dart'
    as _i6;
import 'package:saiyo_pets/domain/entities/oauth/oauth_token.dart' as _i9;
import 'package:saiyo_pets/domain/repositories/animals_repository.dart' as _i3;
import 'package:saiyo_pets/domain/repositories/auth_repository.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAnimalsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAnimalsRepository extends _i1.Mock
    implements _i3.IAnimalsRepository {
  @override
  _i4.Future<_i2.Either<_i5.IFailure, _i6.AnimalsResponse>> getAnimals({
    int? page,
    int? limit,
    String? name,
    String? type,
    required String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimals,
          [],
          {
            #page: page,
            #limit: limit,
            #name: name,
            #type: type,
            #accessToken: accessToken,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.IFailure, _i6.AnimalsResponse>>.value(
                _FakeEither_0<_i5.IFailure, _i6.AnimalsResponse>(
          this,
          Invocation.method(
            #getAnimals,
            [],
            {
              #page: page,
              #limit: limit,
              #name: name,
              #type: type,
              #accessToken: accessToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IFailure, _i6.AnimalsResponse>>.value(
                _FakeEither_0<_i5.IFailure, _i6.AnimalsResponse>(
          this,
          Invocation.method(
            #getAnimals,
            [],
            {
              #page: page,
              #limit: limit,
              #name: name,
              #type: type,
              #accessToken: accessToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IFailure, _i6.AnimalsResponse>>);
  @override
  _i4.Future<_i2.Either<_i5.IFailure, _i2.Unit>> setAdoptedAnimal(
          {required _i7.Animal? animal}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAdoptedAnimal,
          [],
          {#animal: animal},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.IFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.IFailure, _i2.Unit>(
          this,
          Invocation.method(
            #setAdoptedAnimal,
            [],
            {#animal: animal},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IFailure, _i2.Unit>>.value(
                _FakeEither_0<_i5.IFailure, _i2.Unit>(
          this,
          Invocation.method(
            #setAdoptedAnimal,
            [],
            {#animal: animal},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.IFailure, List<_i7.Animal>>> getAdoptedAnimals() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAdoptedAnimals,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.IFailure, List<_i7.Animal>>>.value(
                _FakeEither_0<_i5.IFailure, List<_i7.Animal>>(
          this,
          Invocation.method(
            #getAdoptedAnimals,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IFailure, List<_i7.Animal>>>.value(
                _FakeEither_0<_i5.IFailure, List<_i7.Animal>>(
          this,
          Invocation.method(
            #getAdoptedAnimals,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IFailure, List<_i7.Animal>>>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i8.IAuthRepository {
  @override
  _i4.Future<_i2.Either<_i5.IFailure, _i9.OauthToken>> getAccessToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.IFailure, _i9.OauthToken>>.value(
            _FakeEither_0<_i5.IFailure, _i9.OauthToken>(
          this,
          Invocation.method(
            #getAccessToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IFailure, _i9.OauthToken>>.value(
                _FakeEither_0<_i5.IFailure, _i9.OauthToken>(
          this,
          Invocation.method(
            #getAccessToken,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IFailure, _i9.OauthToken>>);
}
